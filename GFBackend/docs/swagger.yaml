basePath: /gf/api
definitions:
  entity.Article:
    properties:
      communityID:
        type: integer
      content:
        type: string
      createDay:
        type: string
      id:
        type: integer
      title:
        type: string
      typeID:
        type: integer
      username:
        type: string
    type: object
  entity.ArticleComment:
    properties:
      articleID:
        type: integer
      commentID:
        type: integer
      content:
        type: string
      createDay:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  entity.ArticleCommentsInfo:
    properties:
      ArticleComments:
        items:
          $ref: '#/definitions/entity.ArticleComment'
        type: array
      PageNO:
        type: integer
      PageSize:
        type: integer
      TotalPageNO:
        type: integer
    type: object
  entity.ArticleDetail:
    properties:
      CommunityName:
        example: big bang theory
        type: string
      Content:
        example: I love UF
        type: string
      Favorited:
        type: boolean
      ID:
        type: integer
      Liked:
        type: boolean
      NumComment:
        type: integer
      NumFavorite:
        type: integer
      NumLike:
        type: integer
      Owner:
        example: Owner1
        type: string
      Title:
        example: Gator Forum
        type: string
      TypeName:
        example: music
        type: string
      UpdatedAt:
        example: "2018-01-01"
        type: string
    type: object
  entity.ArticleFavorite:
    properties:
      articleID:
        type: integer
      favoriteDay:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  entity.ArticleFavoritesInfo:
    properties:
      ArticleFavorites:
        items:
          $ref: '#/definitions/entity.ArticleFavorite'
        type: array
      PageNO:
        type: integer
      PageSize:
        type: integer
      TotalPageNO:
        type: integer
    type: object
  entity.ArticleInfo:
    properties:
      CommunityID:
        type: integer
      Content:
        example: I love UF
        type: string
      ID:
        type: integer
      Title:
        example: Gator Forum
        type: string
      TypeID:
        type: integer
    type: object
  entity.ArticleOfES:
    properties:
      Content:
        type: string
      ID:
        type: integer
      Title:
        type: string
      Username:
        type: string
    type: object
  entity.ArticleSearchInfo:
    properties:
      PageNO:
        type: integer
      PageSize:
        type: integer
      SearchWords:
        example: Balala Magic Girl
        type: string
    type: object
  entity.ArticleType:
    properties:
      create_Day:
        type: string
      creator:
        type: string
      description:
        type: string
      id:
        type: integer
      typeName:
        type: string
    type: object
  entity.ArticleTypeInfo:
    properties:
      Description:
        example: Discussion of Movie
        type: string
      TypeName:
        example: Movie
        type: string
    type: object
  entity.ArticlesForSearching:
    properties:
      Articles:
        items:
          $ref: '#/definitions/entity.ArticleOfES'
        type: array
      PageNO:
        type: integer
      PageSize:
        type: integer
      TotalPageNO:
        type: integer
    type: object
  entity.Community:
    properties:
      createDay:
        type: string
      creator:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  entity.CommunityInfo:
    properties:
      Creator:
        example: test1
        type: string
      Description:
        example: this is a test community
        type: string
      Name:
        example: community1
        type: string
      id:
        type: integer
    type: object
  entity.CommunityMember:
    properties:
      communityID:
        type: integer
      joinDay:
        type: string
      member:
        type: string
    type: object
  entity.CommunityNameFuzzyMatch:
    properties:
      Name:
        example: community1
        type: string
      PageNO:
        type: integer
      PageSize:
        type: integer
    type: object
  entity.NewCommentInfo:
    properties:
      ArticleID:
        type: integer
      CommentID:
        type: integer
      Content:
        example: It is true
        type: string
    type: object
  entity.NewCommunityInfo:
    properties:
      Communities:
        items:
          $ref: '#/definitions/entity.Community'
        type: array
      NumberOfMember:
        items:
          type: integer
        type: array
      NumberOfPost:
        items:
          type: integer
        type: array
      PageNO:
        type: integer
      PageSize:
        type: integer
    type: object
  entity.NewUserInfo:
    properties:
      Birthday:
        example: 2022-02-30
        type: string
      Department:
        example: CS:GO
        type: string
      Gender:
        example: male/female/unknown
        type: string
      Nickname:
        example: Peter Park
        type: string
      Username:
        example: jamesbond21
        type: string
    type: object
  entity.ResponseMsg:
    properties:
      Nickname:
        example: James Bond
        type: string
      code:
        example: 200
        type: integer
      message:
        example: process successfully
        type: string
      new_community_id:
        type: integer
    type: object
  entity.SimpleUserInfo:
    properties:
      ID:
        example: 21
        type: integer
      Username:
        example: jamesbond21
        type: string
    type: object
  entity.Space:
    properties:
      capacity:
        type: number
      id:
        type: integer
      used:
        type: number
      username:
        type: string
    type: object
  entity.UserFilename:
    properties:
      Filename:
        example: gator.jpg
        type: string
    type: object
  entity.UserFiles:
    properties:
      Filenames:
        example:
        - '"xxx.jpg"'
        - '"xxx.png"'
        - '"xxx.gif"'
        items:
          type: string
        type: array
      Nickname:
        example: James Bond
        type: string
      code:
        example: 200
        type: integer
      message:
        example: process successfully
        type: string
      new_community_id:
        type: integer
    type: object
  entity.UserFollows:
    properties:
      Nickname:
        example: James Bond
        type: string
      Users:
        example:
        - '"spriderman"'
        - '"batman"'
        - '"ironman"'
        items:
          type: string
        type: array
      code:
        example: 200
        type: integer
      message:
        example: process successfully
        type: string
      new_community_id:
        type: integer
    type: object
  entity.UserInfo:
    properties:
      ForAdmin:
        type: boolean
      NewPassword:
        example: 3ecb441b741bcd433288f5557e4b9118
        type: string
      Password:
        example: f9ae5f68ae1e7f7f3fc06053e9b9b539
        type: string
      Username:
        example: jamesbond21
        type: string
    type: object
  entity.UserNewCapacity:
    properties:
      Capacity:
        type: number
      Username:
        example: boss
        type: string
    type: object
  entity.UsersInfo:
    properties:
      PageNO:
        type: integer
      PageSize:
        type: integer
      Users:
        items:
          $ref: '#/definitions/entity.SimpleUserInfo'
        type: array
    type: object
host: http://167.71.166.120:10010
info:
  contact: {}
  description: This is the Gator Forum Backend Server
  termsOfService: https://github.com/fongziyjun16/SE/tree/backend
  title: Gator Forum Backend API
  version: "1.0"
paths:
  /article/create:
    post:
      consumes:
      - application/json
      description: need token in cookie, need new article info
      parameters:
      - description: Create New Article
        in: body
        name: ArticleInfo
        required: true
        schema:
          $ref: '#/definitions/entity.ArticleInfo'
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Create Successfully
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters / Info Error
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Create a new article
      tags:
      - Article Manage
  /article/delete/:id:
    get:
      consumes:
      - application/json
      description: need token in cookie, need new article id
      parameters:
      - description: Article ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Delete Successfully no matter what
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Delete Article By ID
      tags:
      - Article Manage
  /article/getarticlelist:
    get:
      consumes:
      - application/json
      description: need token in cookie, need page and page size
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Page Size
        in: query
        name: pageSize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Successfully
          schema:
            $ref: '#/definitions/entity.Article'
        "400":
          description: <b>Failure</b>. Bad Parameters / Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get Article List
      tags:
      - Article Manage
  /article/getarticlelistbycommunityid:
    get:
      consumes:
      - application/json
      description: need token in cookie, need page and page size
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Page Size
        in: query
        name: pageSize
        required: true
        type: integer
      - description: Community ID
        in: query
        name: communityID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Successfully
          schema:
            $ref: '#/definitions/entity.Article'
        "400":
          description: <b>Failure</b>. Bad Parameters / Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get Article List By Community ID
      tags:
      - Article Manage
  /article/getone:
    get:
      consumes:
      - application/json
      description: need token in cookie, need ID, /getone?id=
      parameters:
      - description: Article ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Successfully
          schema:
            $ref: '#/definitions/entity.ArticleDetail'
        "400":
          description: <b>Failure</b>. Bad Parameters / Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get One Article By ID
      tags:
      - Article Manage
  /article/search:
    get:
      consumes:
      - application/json
      description: need token in cookie, need article search info
      parameters:
      - description: Article ID
        in: body
        name: ArticleSearchInfo
        required: true
        schema:
          $ref: '#/definitions/entity.ArticleSearchInfo'
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Successfully
          schema:
            $ref: '#/definitions/entity.ArticlesForSearching'
        "400":
          description: <b>Failure</b>. Bad Parameters / Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get Articles By Search Words
      tags:
      - Article Manage
  /article/update:
    post:
      consumes:
      - application/json
      description: need token in cookie, need ID, Title, Content in article info only
      parameters:
      - description: Update Article Info
        in: body
        name: ArticleInfo
        required: true
        schema:
          $ref: '#/definitions/entity.ArticleInfo'
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Update Successfully
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters / Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Update Article Title or Content By ID
      tags:
      - Article Manage
  /articlecomment/create:
    post:
      consumes:
      - application/json
      description: need token in cookie, need new article comment info, if comment
        to article, no need CommentID
      parameters:
      - description: Create New Comment
        in: body
        name: ArticleInfo
        required: true
        schema:
          $ref: '#/definitions/entity.NewCommentInfo'
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Create Successfully
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters / Info Error
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Create a new comment to article or comment
      tags:
      - Article Comment Manage
  /articlecomment/delete/:id:
    post:
      consumes:
      - application/json
      description: need token in cookie, need comment ID
      parameters:
      - description: Comment ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Delete Successfully
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters / Info Error
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Delete a comment by id
      tags:
      - Article Comment Manage
  /articlecomment/getbyarticleid:
    get:
      consumes:
      - application/json
      description: 'need token in cookie, need article id, pageno, pagesize in url:
        "/articlecomment/getbyarticleid?id=&pageno=&pagesize="'
      parameters:
      - description: Article ID
        in: query
        name: articleid
        required: true
        type: string
      - description: PageNO
        in: query
        name: pageno
        required: true
        type: string
      - description: PageSize
        in: query
        name: pagesize
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Search Successfully
          schema:
            $ref: '#/definitions/entity.ArticleCommentsInfo'
        "400":
          description: <b>Failure</b>. Bad Parameters / Info Error
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: get direct comments by article id
      tags:
      - Article Comment Manage
  /articlecomment/getsub:
    get:
      consumes:
      - application/json
      description: 'need token in cookie, need article id, comment id, pageno, pagesize
        in url: "/articlecomment/getbyarticleid?articleid=&commentid=&pageno=&pagesize="'
      parameters:
      - description: Article ID
        in: query
        name: articleid
        required: true
        type: string
      - description: Comment ID
        in: query
        name: commentid
        required: true
        type: string
      - description: PageNO
        in: query
        name: pageno
        required: true
        type: string
      - description: PageSize
        in: query
        name: pagesize
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Search Successfully
          schema:
            $ref: '#/definitions/entity.ArticleCommentsInfo'
        "400":
          description: <b>Failure</b>. Bad Parameters / Info Error
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: get sub comments by article id and comment id
      tags:
      - Article Comment Manage
  /articlefavorite/create/:articleID:
    post:
      consumes:
      - application/json
      description: need token in cookie, need article id
      parameters:
      - description: "233333"
        in: query
        name: ArticleID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Create Successfully
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Found or Existed
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: User Favorite Article
      tags:
      - Article Favorite Manage
  /articlefavorite/delete/:articleID:
    post:
      consumes:
      - application/json
      description: need token in cookie, need article id
      parameters:
      - description: "233333"
        in: query
        name: ArticleID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Delete Favorite Successfully
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: User cancel favorite Article
      tags:
      - Article Favorite Manage
  /articlefavorite/get:
    get:
      consumes:
      - application/json
      description: need token in cookie
      parameters:
      - description: 233333, /articlelike/get?pageno=&pagesize=
        in: query
        name: pageno
        required: true
        type: integer
      - description: 233333, /articlelike/get?pageno=&pagesize=
        in: query
        name: pagesize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Create Successfully
          schema:
            $ref: '#/definitions/entity.ArticleFavoritesInfo'
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: User like Article
      tags:
      - Article Favorite Manage
  /articlefavorite/getfavoriteofarticle:
    get:
      consumes:
      - application/json
      description: need token in cookie, need article id
      parameters:
      - description: "233333"
        in: query
        name: ArticleID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Create Successfully
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Found or Existed
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: User Favorite Article
      tags:
      - Article Favorite Manage
  /articlelike/create/:articleID:
    post:
      consumes:
      - application/json
      description: need token in cookie, need article id
      parameters:
      - description: "233333"
        in: query
        name: ArticleID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Create Successfully
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: User like Article
      tags:
      - Article Like Manage
  /articlelike/delete/:articleID:
    post:
      consumes:
      - application/json
      description: need token in cookie, need article id
      parameters:
      - description: "233333"
        in: query
        name: ArticleID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Delete Like Successfully
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: User cancel like Article
      tags:
      - Article Like Manage
  /articlelike/getlikelist:
    get:
      consumes:
      - application/json
      description: need token in cookie
      parameters:
      - description: "233333"
        in: query
        name: articleID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Like List Successfully
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get User's Like List
      tags:
      - Article Like Manage
  /articletype/all:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Successfully
          schema:
            items:
              $ref: '#/definitions/entity.ArticleType'
            type: array
        "400":
          description: <b>Failure</b>. Bad Parameters / Type has existed
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      summary: Get All Article Types
      tags:
      - Article Type Manage
  /articletype/create:
    post:
      consumes:
      - application/json
      description: need token in cookie, need new article type information, cannot
        repeat type name
      parameters:
      - description: New Article Type Information
        in: body
        name: ArticleTypeInfo
        required: true
        schema:
          $ref: '#/definitions/entity.ArticleTypeInfo'
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Create Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters / Type has existed
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Create a new article type by admin user
      tags:
      - Article Type Manage
  /articletype/remove:
    post:
      consumes:
      - application/json
      description: need token in cookie, need type name
      parameters:
      - description: Type Name
        in: body
        name: TypeName
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Remove Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Admin user removes article type
      tags:
      - Article Type Manage
  /articletype/update:
    post:
      consumes:
      - application/json
      description: need token in cookie, need type name & new description
      parameters:
      - description: Type Name
        in: body
        name: TypeName
        required: true
        schema:
          type: string
      - description: Description
        in: body
        name: Description
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Update Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Admin user update article type description
      tags:
      - Article Type Manage
  /community/create:
    post:
      consumes:
      - application/json
      description: need token in cookie, need community name & description only
      parameters:
      - description: Create a new community needs Creator, Name & Description.
        in: body
        name: CommunityInfo
        required: true
        schema:
          $ref: '#/definitions/entity.CommunityInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Create Community Success
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or Community already exists
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Create a new Community
      tags:
      - Community Manage
  /community/delete/:id:
    get:
      consumes:
      - application/json
      description: need token in cookie, need community id only
      parameters:
      - description: Community ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. No matter whether delete successfully, Return
            Success
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Create a new Community
      tags:
      - Community Manage
  /community/get:
    get:
      consumes:
      - application/json
      description: 'need token in cookie, need page info: PageNO, pageSize only'
      parameters:
      - description: Get Communities Info
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/entity.CommunityNameFuzzyMatch'
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Community Success
          schema:
            items:
              $ref: '#/definitions/entity.Community'
            type: array
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get Communities By Name Fuzzy Match
      tags:
      - Community Manage
  /community/getcommunitiesbycreator:
    get:
      consumes:
      - application/json
      description: 'need token in cookie, need page info: username, PageNO, pageSize'
      parameters:
      - description: Get Communities By Creator
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/entity.Community'
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Community Success
          schema:
            items:
              $ref: '#/definitions/entity.NewCommunityInfo'
            type: array
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get Communities By Creator
      tags:
      - Community Manage
  /community/getcommunityidbymember:
    get:
      consumes:
      - application/json
      description: need token in cookie, need member name
      parameters:
      - description: Member Name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Community IDs Success
          schema:
            items:
              type: integer
            type: array
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get Community IDs By Member
      tags:
      - Community Manage
  /community/getmember:
    get:
      consumes:
      - application/json
      description: need token in cookie, need community IDs
      parameters:
      - description: Community ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Members Success
          schema:
            items:
              $ref: '#/definitions/entity.CommunityMember'
            type: array
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get Members By Community IDs
      tags:
      - Community Manage
  /community/getone/:id:
    get:
      consumes:
      - application/json
      description: need token in cookie, need community ID
      parameters:
      - description: Community ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Community Success
          schema:
            $ref: '#/definitions/entity.Community'
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get One Community By ID
      tags:
      - Community Manage
  /community/getonebyname:
    get:
      consumes:
      - application/json
      description: 'need token in cookie, need community Name, page info: PageNO,
        pageSize'
      parameters:
      - description: Community Name Fuzzy Match Info
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/entity.CommunityNameFuzzyMatch'
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Get Community Success
          schema:
            items:
              $ref: '#/definitions/entity.Community'
            type: array
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Found
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Get Communities By Name Fuzzy Match
      tags:
      - Community Manage
  /community/join/:id:
    get:
      consumes:
      - application/json
      description: need token in cookie, need community ID
      parameters:
      - description: Community ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Join Community Success
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Found or Existed
          schema:
            type: string
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Join One Community By ID
      tags:
      - Community Manage
  /community/leave/:id:
    get:
      consumes:
      - application/json
      description: need token in cookie, need community ID
      parameters:
      - description: Community ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Leave Community Success
          schema:
            type: string
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            type: string
      security:
      - ApiAuthToken: []
      summary: Join One Community By ID
      tags:
      - Community Manage
  /community/numberofmember/:id:
    get:
      consumes:
      - application/json
      description: need token in cookie, need community ID
      parameters:
      - description: Community ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Return an Integer
        "400":
          description: <b>Failure</b>. Return 0
        "500":
          description: <b>Failure</b>. Return 0
      security:
      - ApiAuthToken: []
      summary: Get the Number Of Member
      tags:
      - Community Manage
  /community/update:
    post:
      consumes:
      - application/json
      description: need token in cookie, need community ID & description only, only
        by creator
      parameters:
      - description: Update Community Description.
        in: body
        name: CommunityInfo
        required: true
        schema:
          $ref: '#/definitions/entity.CommunityInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Update Success
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or Not Creator or Not Found
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Update Community Description By ID
      tags:
      - Community Manage
  /file/delete:
    post:
      consumes:
      - application/json
      description: need token in cookie, need filename in json
      parameters:
      - description: filename in post request body
        in: body
        name: filename
        required: true
        schema:
          $ref: '#/definitions/entity.UserFilename'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Delete Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or Other
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Delete User File, only have permission to delete self data
      tags:
      - Static Resource
  /file/download:
    post:
      consumes:
      - application/json
      description: need token in cookie, need filename in json
      parameters:
      - description: filename in post request body
        in: body
        name: filename
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Upload Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or No Enough Space
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: User Downloads File, only self data for now
      tags:
      - Static Resource
  /file/scan:
    post:
      consumes:
      - application/json
      description: need token in cookie, only get self files
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Scan Successfully
          schema:
            $ref: '#/definitions/entity.UserFiles'
        "400":
          description: <b>Failure</b>. Bad Parameters.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Scan User files
      tags:
      - Static Resource
  /file/space/info:
    post:
      consumes:
      - application/json
      description: need token in cookie
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Get User Space Info Successfully
          schema:
            $ref: '#/definitions/entity.Space'
        "400":
          description: <b>Failure</b>. Bad Parameters or User not exists.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Browse User Space Info
      tags:
      - Static Resource
  /file/space/update:
    post:
      consumes:
      - application/json
      description: need token in cookie, need target user and  new capacity in json
      parameters:
      - description: Username & New File Total Capacity
        in: body
        name: UserNewCapacity
        required: true
        schema:
          $ref: '#/definitions/entity.UserNewCapacity'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Update Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or Other
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Expand User Capacity, only admin user can do this
      tags:
      - Static Resource
  /file/upload:
    post:
      consumes:
      - application/json
      description: need token in cookie, html file type input element include name
        attribute with value "uploadFilename"
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Upload Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or No Enough Space
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: User Uploads files including images, video etc.
      tags:
      - Static Resource
  /file/upload/groupavatar/:groupid:
    post:
      consumes:
      - application/json
      description: need token in cookie, html file type input element include name
        attribute with value "uploadFilename"
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Upload Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or No Enough Space
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: User Uploads avatar about community that he or she creates
      tags:
      - Static Resource
  /resources/userfiles/{username}/{filename}:
    get:
      consumes:
      - application/json
      description: Static files request, need to claim the username and filename in
        the url
      produces:
      - application/json
      responses: {}
      summary: Request User Files
      tags:
      - Static Resource
  /user/GetUserInfoByUsername:
    get:
      consumes:
      - application/json
      description: need token in cookie
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Search Successfully
          schema:
            $ref: '#/definitions/entity.UserInfo'
        "400":
          description: <b>Failure</b>. Bad Parameters.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Get User's Info
      tags:
      - User Manage
  /user/admin/delete:
    post:
      consumes:
      - application/json
      description: need strings username in post request, need token in cookie
      parameters:
      - description: username in post request body
        in: body
        name: username
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Update Password Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Admin delete Users, cannot self delete
      tags:
      - User Manage
  /user/admin/register:
    post:
      consumes:
      - application/json
      description: only need strings username & password & ForAdmin, need token in
        cookie
      parameters:
      - description: Admin User Register only needs Username, Password(encoded by
          md5) & ForAdmin with true.
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/entity.UserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. User Register Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or User Has Existed
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Register a new Admin User
      tags:
      - User Manage
  /user/follow:
    post:
      consumes:
      - application/json
      description: need token in cookie, need username who is followed
      parameters:
      - description: username in post request body
        in: body
        name: username
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Follow Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or User not exist or User has
            followed.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: User Follow other users
      tags:
      - User Manage
  /user/followees:
    post:
      consumes:
      - application/json
      description: need token in cookie
      parameters:
      - description: username in post request body
        in: body
        name: username
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Search Successfully
          schema:
            $ref: '#/definitions/entity.UserFollows'
        "400":
          description: <b>Failure</b>. Bad Parameters.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Get User's followees
      tags:
      - User Manage
  /user/followers:
    post:
      consumes:
      - application/json
      description: need token in cookie
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Search Successfully
          schema:
            $ref: '#/definitions/entity.UserFollows'
        "400":
          description: <b>Failure</b>. Bad Parameters.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Get User's followers
      tags:
      - User Manage
  /user/getusersinfo:
    get:
      consumes:
      - application/json
      description: need token in cookie
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. Search Successfully
          schema:
            $ref: '#/definitions/entity.UsersInfo'
        "400":
          description: <b>Failure</b>. Bad Parameters.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Get Users' Info By username, pageNo, pageSize, "/getusersinfo?username=&pageNo=&pageSize="
      tags:
      - User Manage
  /user/login:
    post:
      consumes:
      - application/json
      description: only need strings username & password
      parameters:
      - description: only needs username and password
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/entity.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: <b>Success</b>. User Login Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or Username / Password incorrect
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      summary: Admin / Regular User login
      tags:
      - User Manage
  /user/logout:
    post:
      consumes:
      - application/json
      description: need strings username in post request, need token in cookie
      parameters:
      - description: username in post request body
        in: body
        name: username
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiAuthToken: []
      summary: Admin / Regular User logout
      tags:
      - User Manage
  /user/password:
    post:
      consumes:
      - application/json
      description: need token in cookie, need Username, Password, NewPassword
      parameters:
      - description: need Username, Password, NewPassword
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/entity.UserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Update Password Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or Password not match
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Admin & Regular Update Password
      tags:
      - User Manage
  /user/register:
    post:
      consumes:
      - application/json
      description: only need strings username & password
      parameters:
      - description: Regular User Register only needs Username, Password(encoded by
          md5) & ForAdmin with false.
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/entity.UserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. User Register Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or User Has Existed
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      summary: Register a new Regular User
      tags:
      - User Manage
  /user/unfollow:
    post:
      consumes:
      - application/json
      description: need token in cookie, need username who is followed
      parameters:
      - description: username in post request body
        in: body
        name: username
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Unfollow Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters or User not exist.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: User Unfollow other users
      tags:
      - User Manage
  /user/update:
    post:
      consumes:
      - application/json
      description: need token in cookie, need Nickname, Birthday(yyyy-mm-dd), Gender(male
        / female / unknown), Department
      parameters:
      - description: need Nickname, Birthday(yyyy-mm-dd), Gender(male / female / unknown),
          Department
        in: body
        name: NewUserInfo
        required: true
        schema:
          $ref: '#/definitions/entity.NewUserInfo'
      produces:
      - application/json
      responses:
        "201":
          description: <b>Success</b>. Update Password Successfully
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "400":
          description: <b>Failure</b>. Bad Parameters
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
        "500":
          description: <b>Failure</b>. Server Internal Error.
          schema:
            $ref: '#/definitions/entity.ResponseMsg'
      security:
      - ApiAuthToken: []
      summary: Update user information including Nickname, Birthday(yyyy-mm-dd), Gender(male
        / female / unknown), Department
      tags:
      - User Manage
securityDefinitions:
  ApiAuthToken:
    in: cookies
    name: token
    type: apiKey
swagger: "2.0"
